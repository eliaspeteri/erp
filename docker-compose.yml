version: '3'
services:
  authentication:
    build: ./authentication
    container_name: authentication
    volumes:
      - ./authentication:/usr/authentication
    networks:
      - my-network
    ports:
      - '8080:8080'
    depends_on:
      - postgres
    env_file: ./authentication/.env

  products:
    build: ./products
    container_name: products
    volumes:
      - ./products:/usr/products
    networks:
      - my-network
    ports:
      - '8081:8080'
    depends_on:
      - postgres
    env_file: ./products/.env

  users:
    build: ./users
    container_name: users
    volumes:
      - ./users:/usr/users
    networks:
      - my-network
    ports:
      - '8082:8080'
    depends_on:
      - postgres
    env_file: ./users/.env

  postgres:
    image: postgres:latest
    ports:
      - '5432:5432'
    volumes:
      - ./db-data/:/var/lib/postgresql/data
    networks:
      - my-network
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=db
    restart: always
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready']
      interval: 1s
      timeout: 5s
      retries: 10

  adminer:
    image: adminer:latest
    restart: always
    ports:
      - '7777:8080'
    depends_on:
      - postgres
    environment:
      - PGHOST=postgres
    networks:
      - my-network

networks:
  my-network:
    driver: bridge
